import qualified Prelude
import Relude

import qualified Data.Aeson as Aeson
import Data.Aeson.Lens (_String, key)
import Data.Default.Class (Default, def)

import Control.Lens
import Control.Monad.IO.Unlift (withRunInIO)
import Data.Maybe (fromJust)
import Data.Time.Clock

import qualified Data.Map.Strict as Map

import qualified Data.Text as Text
import qualified Data.Text.Lazy as LazyText

import qualified Data.ByteString as ByteString
import qualified Data.ByteString.Char8 as Char8 (pack, unpack)
import qualified Data.ByteString.Lazy.Char8 as LazyChar8
import qualified Data.ByteString.Lazy as LazyByteString

import qualified Data.ByteString.Base16 as Base16

import Network.HTTP.Req (HttpMethod (..), header, httpMethodName, GET (..), HEAD (..), POST (..), PUT (..), PATCH (..), DELETE (..))
import qualified Network.HTTP.Req as Req

import Options.Applicative (execParser)
import System.Directory (createDirectoryIfMissing)

import Trader (App, runApp, MonadApp, Env)
import Trader.Env (mkEnv)

import Trader.Data (Network)
import qualified Trader.Data.Network as Network (toName)

import Trader.Config (Config, apiKey, apiPath, settings)
import qualified Trader.Config as Config (load)

import Trader.API.Auth.Key (Key(..))
import qualified Trader.API.Auth.Key as APIKey (load)

import Trader.API.Request.Expiration (Expiration(..), newExpiration)
import qualified Trader.API.Request.Expiration as Expiration

import Trader.API.Request.Signature (Signature(..), mkSignature)
import qualified Trader.API.Request.Signature as Signature
